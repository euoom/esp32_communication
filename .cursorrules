# ESP32 보드 설정 정보

# 보드 공통 설정
board_type: "esp32:esp32:Geekble_ESP32C3"
baudrate: 115200

# 시리얼 통신 규칙
serial_rules:
  init_delay: 100  # Serial.begin() 이후 100ms 딜레이 필요
  description: "시리얼 통신 초기화 후 안정적인 통신을 위해 딜레이 필요"

# MicroPython BLE UUID 규칙
micropython_ble_rules:
  uuid_class: "bluetooth.UUID 클래스 사용 필수"
  uuid_format:
    - "16비트 정수 (예: 0x2908)"
    - "128비트 UUID 문자열 (예: '6E400001-B5A3-F393-E0A9-E50E24DCCA9E')"
  description: "MicroPython BLE 모듈에서 UUID는 반드시 bluetooth.UUID 클래스를 사용하여 생성해야 함"

# LED 제어 프로젝트 규칙
led_control_rules:
  wifi_ap:
    ssid: "ESP32_LED_AP"
    password: "12345678"
    port: 8080
  led_pin: 3  # GPIO 3번 핀
  commands:
    - "LED_ON"
    - "LED_OFF"
    - "LED_BLINK:<count>:<interval>"
  response_format:
    success: "<command>_OK"
    error: "ERROR:<reason>"
  description: "LED 제어 명령은 반드시 정의된 형식을 따라야 하며, 응답은 성공/실패 여부를 포함해야 함"

# 트랜스미터 보드 설정
transmitter:
  port: "COM5"
  mac_address: "dc:06:75:68:0b:52"
  role: "transmitter"
  description: "블루투스 클라이언트 모드로 동작하는 송신기"

# 리시버 보드 설정
receiver:
  port: "COM6"
  mac_address: "dc:06:75:67:f5:ee"
  role: "receiver"
  description: "블루투스 서버 모드로 동작하는 수신기"

# 컴파일 및 업로드 명령어 템플릿
commands:
  compile: "arduino-cli compile --fqbn {board_type} {sketch_path}"
  upload: "arduino-cli upload -p {port} --fqbn {board_type} {sketch_path}"
  monitor: "arduino-cli monitor -p {port} -c baudrate={baudrate}"

# 프로젝트 경로
project_paths:
  transmitter: "hello_world_arduino_bluetooth/transmitter"
  receiver: "hello_world_arduino_bluetooth/receiver"
  led_control_transmitter: "led_control_python_wifi/transmitter"
  led_control_receiver: "led_control_python_wifi/receiver"

